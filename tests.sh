#!/bin/bash

OK="\x1b[32;01m[âœ”]\x1b[0m"
KO="\x1b[31;01m[X]\x1b[0m"

BOLD="\033[1m"
UNBOLD="\033[0m"

binary="scheme -q"
binary="./hal -iq"

tmp_file=$(mktemp)

count_test_passed=0
count_test_failed=0

function test_hal() {
    result=$(echo "$1" | $binary)
    exit_value=$?
    if [ $exit_value = 0 ]; then
        if [ "$result" = "$2" ]; then
            echo -en "$OK "
            echo "'$1' = '$2'"
            count_test_passed=$((count_test_passed + 1))
        else
            echo -en "$KO "
            echo "'$1'"
            echo -e "\tgot '$result'"
            echo -e "\texpecetd '$2'"
            count_test_failed=$((count_test_failed + 1))
        fi
    else
        echo -en "$KO "
        echo "'$1'"
        echo -e "\texit with '$exit_value'"
        echo -e "\texpected '0'"
        count_test_failed=$((count_test_failed + 1))
    fi
}

function test_hal_error_handling() {
    echo "$1" >$tmp_file
    $binary $tmp_file >/dev/null 2>&1
    exit_value=$?
    if [ $exit_value != 0 ]; then
        echo -e "$OK Error check: '$1'"
        count_test_passed=$((count_test_passed + 1))
    else
        echo -e "$KO Error check: '$1'"
        echo -e "\texit with '$exit_value'"
        echo -e "\texpected '84'"
        count_test_failed=$((count_test_failed + 1))
    fi
}

# Tests
echo -e "\n$BOLD""Builtins""$UNBOLD"

echo "Const"
test_hal "#t" "#t"
test_hal "#f" "#f"
test_hal "1" "1"
test_hal "-42" "-42"
test_hal "1.0" "1.0"
test_hal ".0" "0.0"
test_hal "\"\"" "\"\""
test_hal "\"42\"" "\"42\""
test_hal "\"Hello World\"" "\"Hello World\""
test_hal "#\\alarm" "#\\alarm"
test_hal "#\\backspace" "#\\backspace"
test_hal "#\\delete" "#\\delete"
test_hal "#\\esc" "#\\esc"
test_hal "#\\newline" "#\\newline"
test_hal "#\\page" "#\\page"
test_hal "#\\return" "#\\return"
test_hal "#\\space" "#\\space"
test_hal "#\\tab" "#\\tab"
test_hal "#\\vtab" "#\\vtab"
test_hal "#\\o" "#\\o"
test_hal "#\\k" "#\\k"
test_hal "\"\"" "\"\""

echo "Cons"
test_hal "(cons 1 2)" "(1 . 2)"
test_hal "(cons 1 (cons 2 (cons 3 '())))" "(1 2 3)"
test_hal "(cons 1 (cons 2 (cons 3 4)))" "(1 2 3 . 4)"
test_hal "(cons 1 (cons 2 (cons 3 '())))" "(1 2 3)"
test_hal "(cons '() '())" "(())"
test_hal "(cons 1 '())" "(1)"
test_hal "(cons '() '1)" "(() . 1)"
test_hal "(cons '() '(1))" "(() 1)"
test_hal "(cons '() '((1)))" "(() (1))"
test_hal "(cons (cons 1 2) 3)" "((1 . 2) . 3)"
test_hal "(cons 3 (cons 1 2))" "(3 1 . 2)"
test_hal "(cons (cons 1 2) (cons 3 4))" "((1 . 2) 3 . 4)"

test_hal "(cons 4 '())" "(4)"
test_hal "(cons 3 (cons 4 '()))" "(3 4)"
test_hal "(cons '+ (cons 3 (cons 4 '())))" "(+ 3 4)"
test_hal "(cons (cons 4 '()) '())" "((4))"
test_hal "(cons (cons '+ (cons 3 (cons 4 '()))) '())" "((+ 3 4))"
test_hal "(cons 2 (cons (cons '+ (cons 3 (cons 4 '()))) '()))" "(2 (+ 3 4))"
test_hal "(cons '* (cons 2 (cons (cons '+ (cons 3 (cons 4 '()))) '())))" "(* 2 (+ 3 4))"

test_hal "'(1 . ( 2 . ( 3 . ())))" "(1 2 3)"
test_hal "'((a . b) . ((foo . bar) . ((5 . 6) . ())))" "((a . b) (foo . bar) (5 . 6))"
test_hal "'(a . (b . ((c . (d . ())) . (e . ()))))" "(a b (c d) e)"
test_hal "'(((1 . 2) . (3 . 4)) . ((5 . 6) . (7 . 8)))" "(((1 . 2) 3 . 4) (5 . 6) 7 . 8)"

echo "Car"
test_hal "(car (cons 1 2))" "1"
test_hal "(car (cons 1 #t))" "1"
test_hal "(car (car (cons (cons 1 2) 3)))" "1"

echo "Cdr"
test_hal "(cdr (cons 1 2))" "2"
test_hal "(cdr (cons 1 #t))" "#t"
test_hal "(cdr '(1 2 3))" "(2 3)"
test_hal "(cdr (car (cons (cons 1 2) 3)))" "2"

echo "Ca/dr"
test_hal "(caar (cons (cons 1 2) 3))" "1"
test_hal "(cdar (cons (cons 1 2) 3))" "2"
test_hal "(car '(((1 . 2) . (3 . 4)) . ((5 . 6) . (7 . 8))))" "((1 . 2) 3 . 4)"
test_hal "(cadr '(((1 . 2) . (3 . 4)) . ((5 . 6) . (7 . 8))))" "(5 . 6)"
test_hal "(caddr '(((1 . 2) . (3 . 4)) . ((5 . 6) . (7 . 8))))" "7"
test_hal "(cadar '(((1 . 2) . (3 . 4)) . ((5 . 6) . (7 . 8))))" "3"

echo "Eq?"
test_hal "(eq? 1 1)" "#t"
test_hal "(eq? (+ 1 1) 2)" "#t"
test_hal "(eq? 'foo (car '(foo bar)))" "#t"
test_hal "(eq? 'foo 'bar)" "#f"
test_hal "(eq? '() '())" "#t"
test_hal "(eq? '() 'foo)" "#f"
test_hal "(eq? '(1 2) '(1 2))" "#f"
test_hal "(eq? '(1 2) '(1 3))" "#f"
test_hal "(eq? '(1 2) '(1 2 3))" "#f"
test_hal "(eq? '() '(1))" "#f"
test_hal "(eq? '(1) '(1))" "#f"
test_hal "(eq? \"test\" \"test\")" "#f"
test_hal "(eq? \"test\" \"err\")" "#f"
test_hal "(eq? + -)" "#f"
test_hal_error_handling "(eq? 1 1 1)"
test_hal_error_handling "(eq? 1)"

echo "Predicates"

test_hal "(number? 10)" "#t"
test_hal "(number? 10.42)" "#t"
test_hal "(real? 10)" "#t"
test_hal "(real? 10.42)" "#t"
test_hal "(rational? 10)" "#t"
test_hal "(rational? 10.42)" "#t"
test_hal "(complex? 10)" "#t"
test_hal "(complex? 10.42)" "#t"
test_hal "(exact? 10)" "#t"
test_hal "(exact? 10.42)" "#f"
test_hal "(inexact? 10)" "#f"
test_hal "(inexact? 10.42)" "#t"
test_hal "(integer? 10)" "#t"
test_hal "(integer? 10.42)" "#f"
test_hal "(finite? 10)" "#t"
test_hal "(finite? 10.42)" "#t"
test_hal "(infinite? 10)" "#f"
test_hal "(infinite? 10.42)" "#f"
test_hal "(nan? 10)" "#f"
test_hal "(nan? 10.42)" "#f"

echo "Atom?"
test_hal "(atom? 'foo)" "#t"
test_hal "(atom? '(1 2 3))" "#f"
test_hal "(atom? '())" "#t"

echo "List"
test_hal "(list)" "()"
test_hal "(list 1)" "(1)"
test_hal "(list 1 2 3)" "(1 2 3)"
test_hal "(list 'a 'b 'c)" "(a b c)"
test_hal "(list 'a '(b c))" "(a (b c))"
test_hal "(list (list 'a 'b))" "((a b))"
test_hal "(list (list 'a '(b c)) (list 'b '(c d)))" "((a (b c)) (b (c d)))"

echo "Length"
test_hal "(length '())" "0"
test_hal "(length '(1))" "1"
test_hal "(length '(1 2))" "2"

echo "Append"
test_hal "(append '(1 2 3) '(4 5 6))" "(1 2 3 4 5 6)"
test_hal "(append '() '(1 2 3))" "(1 2 3)"
test_hal "(append '(1 2 3) '())" "(1 2 3)"
test_hal "(append '(1) 1)" "(1 . 1)"
test_hal "(append '(1) '(1) 1)" "(1 1 . 1)"
test_hal "(append '(1) '(1) '(1))" "(1 1 1)"
test_hal "(append '(1))" "(1)"
test_hal "(append '())" "()"
test_hal "(append)" "()"
test_hal "(append (list 1) 1)" "(1 . 1)"
test_hal "(append (list 1) (list 1))" "(1 1)"
test_hal "(append (list 1 2) (cons 1 2))" "(1 2 1 . 2)"
test_hal "(append (list 1 2) (cons 3 4))" "(1 2 3 . 4)"
test_hal "(append (list 1 2) (list 3 4))" "(1 2 3 4)"
test_hal "(append (list 1 2) '(list 3 4))" "(1 2 list 3 4)"

echo "Reverse"
test_hal "(reverse '())" "()"
test_hal "(reverse '(1))" "(1)"
test_hal "(reverse '(1 2))" "(2 1)"
test_hal "(reverse '(1 2 3))" "(3 2 1)"
test_hal "(reverse '(1 2 3 4))" "(4 3 2 1)"

echo -e "\n$BOLD""Functional primitives""$UNBOLD"

echo "Map"
test_hal "(map reverse '())" "()"
test_hal "(map reverse '((1 2)))" "((2 1))"
test_hal "(map reverse '((1 2) (3 4) (5 6)))" "((2 1) (4 3) (6 5))"
test_hal "(map (lambda (x) (* x 2)) '(1 2 3 4 5))" "(2 4 6 8 10)"

echo "Filter"
test_hal "(filter (lambda (x) (eq? (mod x 2) 1)) '(1 2 3 4 5))" "(1 3 5)"

echo "Fold..."
test_hal "(fold-left (lambda (acc x) (- acc x)) 0 '(1 2 3))" "-6"
test_hal "(fold-right (lambda (x acc) (- x acc)) 0 '(1 2 3))" "2"
test_hal "(fold-left + 0 '(1 2 3 4 5))" "15"

echo -e "\n$BOLD""Arithmetic builtins""$UNBOLD"
test_hal "(+)" "0"
test_hal "(+ 1)" "1"
test_hal "(+ 1 2)" "3"
test_hal "(+ 1.0)" "1.0"
test_hal "(+ 1.0 2)" "3.0"
test_hal "(+ 1 2.0)" "3.0"
test_hal "(+ 1.0 2.0)" "3.0"

test_hal "(- 1)" "-1"
test_hal "(- 1 2)" "-1"
test_hal "(- 1 2 3)" "-4"
test_hal "(- 1.0)" "-1.0"
test_hal "(- 1.0 2 3)" "-4.0"
test_hal "(- 1 2.0 3)" "-4.0"
test_hal "(- 1 2 3.0)" "-4.0"
test_hal "(- 1.0 2.0 3.0)" "-4.0"

test_hal "(*)" "1"
test_hal "(* 1)" "1"
test_hal "(* 3)" "3"
test_hal "(* 3 3)" "9"
test_hal "(* 3 3 3)" "27"
test_hal "(* 3 -3 3)" "-27"
test_hal "(* 3.0 -3 3)" "-27.0"
test_hal "(* 3 -3.0 3)" "-27.0"
test_hal "(* 3 -3 3.0)" "-27.0"
test_hal "(* 3.0 -3.0 3.0)" "-27.0"

test_hal "(div 3 5)" "0"
test_hal "(div 3 6)" "0"
test_hal "(div 3 3)" "1"
test_hal "(div 3 2)" "1"
test_hal "(div 3 1)" "3"
test_hal "(div 3.0 1)" "3.0"
test_hal "(div 3 1.0)" "3.0"
test_hal "(div 3.0 1.0)" "3.0"
test_hal "(div 3.0 -1.0)" "-3.0"
test_hal "(div 3 -1.0)" "-3.0"
test_hal "(div 3 -1)" "-3"
test_hal "(div 3 -1.5)" "-2.0"
test_hal_error_handling "(div 3)"
test_hal_error_handling "(div 3 0)"
test_hal_error_handling "(div 3.0 1.0 2.0)"

test_hal "(mod 8 2)" "0"
test_hal "(mod 8 3)" "2"
test_hal_error_handling "(mod 3)"
test_hal_error_handling "(mod 3 0)"
test_hal_error_handling "(mod 3.0 1.0 2.0)"

test_hal "(* 5 2)" "10"
test_hal "(div 10 (- 3))" "-3"
test_hal "(div 10 -3)" "-3"
test_hal "(div (* 5 2) (- 3))" "-3"
test_hal "(mod (+ 5 5) 3)" "1"

echo -e "\n$BOLD""Boolean logic""$UNBOLD"
test_hal "(not #t)" "#f"
test_hal "(not #f)" "#t"
test_hal "(not '#t)" "#f"
test_hal "(not '#f)" "#t"
test_hal "(not ''#t)" "#f"
# test_hal "(not ''#f)" "#t"
test_hal "(not \"ok\")" "#f"
test_hal "(not 2)" "#f"
test_hal "(not '())" "#f"
test_hal "(not (cons 1 2))" "#f"
test_hal_error_handling "(not)"
test_hal_error_handling "(not 1 1)"

test_hal "(or)" "#f"
test_hal "(or #f)" "#f"
test_hal "(or #t)" "#t"
test_hal "(or #f #f)" "#f"
test_hal "(or #f #t)" "#t"
test_hal "(or #f #f #t)" "#t"
test_hal "(or #f 1 #t)" "1"
test_hal "(or #f 5 #t)" "5"
test_hal "(or #f 5 8)" "5"
test_hal "(or 1 5 8)" "1"
test_hal "(or '() 5 8)" "()"

test_hal "(and)" "#t"
test_hal "(and #f)" "#f"
test_hal "(and #t)" "#t"
test_hal "(and #f #f)" "#f"
test_hal "(and #f #t)" "#f"
test_hal "(and #f #f #t)" "#f"
test_hal "(and #f 1 #t)" "#f"
test_hal "(and #f 5 #t)" "#f"
test_hal "(and #f 5 8)" "#f"
test_hal "(and 1 5 8)" "8"
test_hal "(and '() 5 8)" "8"
test_hal "(and #t #f #t)" "#f"
test_hal "(and #t 1 #t)" "#t"
test_hal "(and #t 1 9)" "9"
test_hal "(and #t 8 9)" "9"
test_hal "(and #t 8 9 41)" "41"
test_hal "(and #t 8 #f 41)" "#f"

test_hal "(and (or (not #f) #f) #t)" "#t"
test_hal "(or (and (not #f) #f) #t)" "#t"
test_hal "(and #t (or #f #t))" "#t"
test_hal "(or #f (and #f #t))" "#f"
test_hal "(or (and #f #f) #t)" "#t"

echo -e "\n$BOLD""Comparison builtins""$UNBOLD"
test_hal "(< 1)" "#t"
test_hal "(< -1)" "#t"
test_hal "(< 1 2)" "#t"
test_hal "(< 1 2 3)" "#t"
test_hal "(< 1 3 2)" "#f"
test_hal "(< 3 2 1)" "#f"

test_hal "(>= 1)" "#t"
test_hal "(>= -1)" "#t"
test_hal "(>= 1 2)" "#f"
test_hal "(>= 1 2 3)" "#f"
test_hal "(>= 1 3 2)" "#f"
test_hal "(>= 3 2 1)" "#t"
test_hal "(>= 3 2 2)" "#t"
test_hal "(>= 3 2 3)" "#f"

test_hal "(max 1 2 3 5 6 4 2)" "6"
test_hal "(max -1)" "-1"
test_hal "(min 1 2 3 5 6 4 2)" "1"

echo -e "\n$BOLD""String comparison builtins""$UNBOLD"
test_hal_error_handling "(string=?)" "#t"
test_hal_error_handling "(string<?)" "#t"
test_hal_error_handling "(string>?)" "#t"
test_hal_error_handling "(string<=?)" "#t"
test_hal_error_handling "(string>=?)" "#t"
test_hal "(string=? \"ok\")" "#t"
test_hal "(string<? \"ok\")" "#t"
test_hal "(string>? \"ok\")" "#t"
test_hal "(string<=? \"ok\")" "#t"
test_hal "(string>=? \"ok\")" "#t"

test_hal "(string=? \"ok\" \"ok\")" "#t"
test_hal "(string<? \"ok\" \"ok\")" "#f"
test_hal "(string>? \"ok\" \"ok\")" "#f"
test_hal "(string<=? \"ok\" \"ok\")" "#t"
test_hal "(string>=? \"ok\" \"ok\")" "#t"
test_hal "(string=? \"ok\" \"ko\")" "#f"
test_hal "(string<? \"ok\" \"ko\")" "#f"
test_hal "(string>? \"ok\" \"ko\")" "#t"
test_hal "(string<=? \"ok\" \"ko\")" "#f"
test_hal "(string>=? \"ok\" \"ko\")" "#t"
test_hal "(string=? \"ko\" \"ok\")" "#f"
test_hal "(string<? \"ko\" \"ok\")" "#t"
test_hal "(string>? \"ko\" \"ok\")" "#f"
test_hal "(string<=? \"ko\" \"ok\")" "#t"
test_hal "(string>=? \"ko\" \"ok\")" "#f"

test_hal "(string=? \"ok\" \"ok\" \"ok\")" "#t"
test_hal "(string<? \"ok\" \"ok\" \"ok\")" "#f"
test_hal "(string>? \"ok\" \"ok\" \"ok\")" "#f"
test_hal "(string<=? \"ok\" \"ok\" \"ok\")" "#t"
test_hal "(string>=? \"ok\" \"ok\" \"ok\")" "#t"
test_hal "(string=? \"ok\" \"ko\" \"ok\")" "#f"
test_hal "(string<? \"ok\" \"ko\" \"ok\")" "#f"
test_hal "(string>? \"ok\" \"ko\" \"ok\")" "#f"
test_hal "(string<=? \"ok\" \"ko\" \"ok\")" "#f"
test_hal "(string>=? \"ok\" \"ko\" \"ok\")" "#f"
test_hal "(string=? \"ko\" \"ok\" \"ko\")" "#f"
test_hal "(string<? \"ko\" \"ok\" \"ko\")" "#f"
test_hal "(string>? \"ko\" \"ok\" \"ko\")" "#f"
test_hal "(string<=? \"ko\" \"ok\" \"ko\")" "#f"
test_hal "(string>=? \"ko\" \"ok\" \"ko\")" "#f"

test_hal "(string=? \" ok\" \"ok\")" "#f"
test_hal "(string=? \"ok \" \"ok\")" "#f"
test_hal "(string=? \"ok\" \" ok\")" "#f"
test_hal "(string=? \"ok\" \"ok \")" "#f"
test_hal "(string=?   \"ok\"   \"ok\"  )" "#t"

echo -e "\n$BOLD""IO builtins""$UNBOLD"
test_hal "(display 1)" "1"
test_hal "(display (display 1))" "1#<void>"
test_hal_error_handling "(display)"
test_hal_error_handling "(display 1 2)"

test_hal "(begin (display 1) (display 2))" "12"
test_hal "(begin (display 1) (newline) (display 2))" "1"$'\n'"2"

echo -e "\n$BOLD""Special forms""$UNBOLD"

echo "Quote"
test_hal "'1" "1"
test_hal "''1" "'1"
test_hal "'''1" "''1"
test_hal "(quote toto)" "toto"
test_hal "(quote (+ 1 2))" "(+ 1 2)"
test_hal "'toto" "toto"
test_hal "'(+ 1 2)" "(+ 1 2)"
test_hal "'(cons '* (cons 2 2))" "(cons '* (cons 2 2))"
test_hal "'(cons '* (cons 2 '('())))" "(cons '* (cons 2 '('())))"
test_hal "'(cons '* ''(cons '2 ''('())))" "(cons '* ''(cons '2 ''('())))"
test_hal "'('cons '* ''(cons '2 ''('())))" "('cons '* ''(cons '2 ''('())))"

test_hal "(+ '1 '1)" "2"
test_hal_error_handling "(+ ''1 ''1)"

echo "Lambda"
test_hal "(lambda () 5)" "#<procedure>"
test_hal "(lambda (a b) (+ a b))" "#<procedure>"
test_hal "((lambda (a b) (+ a b)) 1 2)" "3"
test_hal "((lambda () 5))" "5"
test_hal "((lambda (x) (* x x)) 5)" "25"
test_hal "((lambda (x f) (f x)) 5 (lambda (x) (+ x x)))" "10"

test_hal "(lambda a a)" "#<procedure>"
test_hal "((lambda a a) 1)" "(1)"
test_hal "((lambda a a) 1 2)" "(1 2)"
test_hal "((lambda a a) 1 2 3)" "(1 2 3)"

test_hal "(lambda (a . b) a b)" "#<procedure>"
test_hal "((lambda (a . b) a b) 1 2)" "(2)"
test_hal "((lambda (a . b) (cons a b)) 1)" "(1)"
test_hal "((lambda (a . b) (cons a b)) 1 2)" "(1 2)"
test_hal "((lambda (a . b) (cons a b)) 1 2 3)" "(1 2 3)"

test_hal_error_handling "((lambda (a . b) (cons a b)))"

echo "Define"
test_hal "(define foo 42)"$'\n'"foo" "42"
test_hal "(define add (lambda (a b) (+ a b)))"$'\n'"(add 1 3)" "4"
test_hal "(define (sub a b) (- a b))"$'\n'"(sub 3 1)" "2"

echo "Let"
test_hal "(let ((a 1)) a)" "1"
test_hal "(let ((a 2) (b (+ 1 2))) (+ a b))" "5"

echo "Cond"
test_hal "(cond (#f 1) (#t (+ 1 1)))" "2"
test_hal "(cond ((eq? 'foo (car '(foo bar))) 'here) ((eq? 1 2) 'there) (#t 'nope))" "here"

echo "If"
test_hal "(if #f 1 2)" "2"
test_hal "(if #t 1 2)" "1"
test_hal "(if #t (if #f 1 2) 3)" "2"
test_hal "(if #f (if #t 1 2) 3)" "3"
test_hal "(if #f 1)" ""
test_hal "(if #t 1)" "1"
test_hal "(if #t (if #f 1))" ""

echo -e "\n$BOLD""Special tests""$UNBOLD"
echo "Eval order"
test_hal "(define x (lambda () y)) (define y 1) (display (x))" "1"

echo
echo -e "$BOLD""$count_test_passed tests passed""$UNBOLD"
echo -e "$BOLD""$count_test_failed tests failed""$UNBOLD"
